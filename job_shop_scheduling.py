"""
参考文献:https://qiita.com/YosukeKentuckyFriedChicken/items/4db6a1ce5da402913ad6

ジョブショップスケジューリング問題の各クラスを格納するモジュール
class JobMachineTableBase: 各問題を継承して情報を取得する
class JobMachineChild: 遺伝子をガントチャートに展開する際に用いる情報を取得する
"""


# Job x Machine データを格納する基底クラス
class JobMachineTableBase:
    def __init__(self):
        self.m_table, self.pt_table = self.initial_table()

    # 問題ごとにオーバーライドする
    # [機械番号, 加工時間]のリスト
    def initial_table(self):
        return None, None

    # reactive scheduling system用の初期ガントチャート
    def initial_gantt(self):
        return None

    # 遅延が発生しているガントチャート
    def delayed_gantt(self):
        return None

    # 機械番号をゼロ開始に変更しつつ機械番号用のテーブルと加工時間用のテーブルに分けて格納
    def convert_table(self, jm_table):
        m_table, pt_table = [], []
        for row in jm_table:
            machines, pt_list = [], []
            for m, p in row:
                machines.append(m - 1)
                pt_list.append(p)
            m_table.append(machines)
            pt_table.append(pt_list)
        return m_table, pt_table

    # ジョブ数を取得
    def get_job_count(self):
        return len(self.m_table)

    # ジョブの工程数（機械数）を取得
    def get_machine_count(self):
        return len(self.m_table[0])

    # job_numジョブのprocess_index工程のMachine番号を取得
    def get_machine(self, job_num, process_index):
        return self.m_table[job_num][process_index]

    # job_numジョブのprocess_index工程の処理時間を取得
    def get_process_time(self, job_num, process_index):
        return self.pt_table[job_num][process_index]

    def get_child(self):
        return JobMachineChild(self)

    def get_child_reactive(self, fixed_gantt, reschdule_time):
        return JobMachineChild_Reactive(self, fixed_gantt, reschdule_time)


# JobMachineTableBaseを継承
class MT6_6(JobMachineTableBase):
    def initial_table(self):
        jm_table = [
            [[3, 1], [1, 3], [2, 6], [4, 7], [6, 3], [5, 6]],
            [[2, 8], [3, 5], [5, 10], [6, 10], [1, 10], [4, 4]],
            [[3, 5], [4, 4], [6, 8], [1, 9], [2, 1], [5, 7]],
            [[2, 5], [1, 5], [3, 5], [4, 3], [5, 8], [6, 9]],
            [[3, 9], [2, 3], [5, 5], [6, 4], [1, 3], [4, 1]],
            [[2, 3], [4, 3], [6, 9], [1, 10], [5, 4], [3, 1]],
        ]
        # 機械番号をゼロ開始に変更しつつ機械番号用のテーブルと加工時間用のテーブルに分けて格納
        return self.convert_table(jm_table)


# MT10x10問題  [機械番号, 加工時間]
class MT10_10(JobMachineTableBase):
    def initial_table(self):
        # fmt: off
        jm_table = [
            [[1, 29], [2, 78], [3, 9], [4, 36], [5, 49], [6, 11], [7, 62], [8, 56], [9, 44], [10, 21],],
            [[1, 43], [3, 90], [5, 75], [10, 11], [4, 69], [2, 28], [7, 46], [6, 46], [8, 72], [9, 30],],
            [[2, 91], [1, 85], [4, 39], [3, 74], [9, 90], [6, 10], [8, 12], [7, 89], [10, 45], [5, 33],],
            [[2, 81], [3, 95], [1, 71], [5, 99], [7, 9], [9, 52], [8, 85], [4, 98], [10, 22], [6, 43],],
            [[3, 14], [1, 6], [2, 22], [6, 61], [4, 26], [5, 69], [9, 21], [8, 49], [10, 72], [7, 53],],
            [[3, 84], [2, 2], [6, 52], [4, 95], [9, 48], [10, 72], [1, 47], [7, 65], [5, 6], [8, 25],],
            [[2, 46], [1, 37], [4, 61], [3, 13], [7, 32], [6, 21], [10, 32], [9, 89], [8, 30], [5, 55],],
            [[3, 31], [1, 86], [2, 46], [6, 74], [5, 32], [7, 88], [9, 19], [10, 48], [8, 36], [4, 79],],
            [[1, 76], [2, 69], [4, 76], [6, 51], [3, 85], [10, 11], [7, 40], [8, 89], [5, 26], [9, 74],],
            [[2, 85], [1, 13], [3, 61], [7, 7], [9, 64], [10, 76], [6, 47], [4, 52], [5, 90], [8, 45],],
        ]
        # fmt: on
        # 機械番号をゼロ開始に変更しつつ機械番号用のテーブルと加工時間用のテーブルに分けて格納
        return self.convert_table(jm_table)

    # リアクティブスケジュールの初期ガントチャートの取得 [start, end, job_num]
    def initial_gantt(self):
        # fmt: off
        init_gantt = [
            [[0, 76, 8], [76, 105, 0], [115, 201, 7], [201, 244, 1], [244, 250, 4], [250, 263, 9], [263, 334, 3], [364, 401, 6], [401, 448, 5], [455, 540, 2]], 
            [[0, 81, 3], [84, 86, 5], [86, 171, 9], [171, 249, 0], [249, 318, 8], [318, 364, 6], [364, 455, 2], [455, 501, 7], [501, 523, 4], [531, 559, 1]], 
            [[0, 84, 5], [84, 115, 7], [115, 210, 3], [210, 224, 4], [249, 258, 0], [258, 348, 1], [348, 409, 9], [445, 530, 8], [530, 543, 6], [579, 653, 2]], 
            [[138, 233, 5], [258, 294, 0], [318, 394, 8], [401, 462, 6], [462, 531, 1], [540, 579, 2], [636, 662, 4], [683, 735, 9], [755, 853, 3], [868, 947, 7]], 
            [[294, 343, 0], [348, 423, 1], [423, 522, 3], [522, 528, 5], [575, 607, 7], [662, 731, 4], [731, 757, 8], [757, 847, 9], [902, 957, 6], [971, 1004, 2]], 
            [[86, 138, 5], [343, 354, 0], [394, 445, 8], [501, 575, 7], [575, 636, 4], [636, 683, 9], [727, 748, 6], [748, 758, 2], [773, 819, 1], [926, 969, 3]], 
            [[354, 416, 0], [416, 423, 9], [448, 513, 5], [522, 531, 3], [541, 581, 8], [607, 695, 7], [695, 727, 6], [727, 773, 1], [773, 862, 2], [904, 957, 4]], 
            [[416, 472, 0], [528, 553, 5], [581, 670, 8], [670, 755, 3], [758, 770, 2], [783, 832, 4], [832, 868, 7], [872, 902, 6], [902, 974, 1], [974, 1019, 9]], 
            [[233, 281, 5], [423, 487, 9], [487, 531, 0], [531, 583, 3], [653, 743, 2], [743, 762, 7], [762, 783, 4], [783, 872, 6], [872, 946, 8], [974, 1004, 1]], 
            [[281, 353, 5], [423, 434, 1], [530, 541, 8], [541, 617, 9], [617, 638, 0], [748, 780, 6], [780, 828, 7], [832, 904, 4], [904, 926, 3], [926, 971, 2]]
        ]
        # fmt: on
        return init_gantt

    # Machine2のジョブ8の終了時刻が318 → 378に遅延しているガントチャートを取得
    def delayed_gantt(self):
        # fmt: off
        delayed_gantt = [
            [[0, 76, 8], [76, 105, 0], [115, 201, 7], [201, 244, 1], [244, 250, 4], [250, 263, 9], [263, 334, 3], [364, 401, 6], [401, 448, 5], [455, 540, 2]], 
            [[0, 81, 3], [84, 86, 5], [86, 171, 9], [171, 249, 0], [249, 378, 8], [318, 364, 6], [364, 455, 2], [455, 501, 7], [501, 523, 4], [531, 559, 1]], 
            [[0, 84, 5], [84, 115, 7], [115, 210, 3], [210, 224, 4], [249, 258, 0], [258, 348, 1], [348, 409, 9], [445, 530, 8], [530, 543, 6], [579, 653, 2]], 
            [[138, 233, 5], [258, 294, 0], [318, 394, 8], [401, 462, 6], [462, 531, 1], [540, 579, 2], [636, 662, 4], [683, 735, 9], [755, 853, 3], [868, 947, 7]], 
            [[294, 343, 0], [348, 423, 1], [423, 522, 3], [522, 528, 5], [575, 607, 7], [662, 731, 4], [731, 757, 8], [757, 847, 9], [902, 957, 6], [971, 1004, 2]], 
            [[86, 138, 5], [343, 354, 0], [394, 445, 8], [501, 575, 7], [575, 636, 4], [636, 683, 9], [727, 748, 6], [748, 758, 2], [773, 819, 1], [926, 969, 3]], 
            [[354, 416, 0], [416, 423, 9], [448, 513, 5], [522, 531, 3], [541, 581, 8], [607, 695, 7], [695, 727, 6], [727, 773, 1], [773, 862, 2], [904, 957, 4]], 
            [[416, 472, 0], [528, 553, 5], [581, 670, 8], [670, 755, 3], [758, 770, 2], [783, 832, 4], [832, 868, 7], [872, 902, 6], [902, 974, 1], [974, 1019, 9]], 
            [[233, 281, 5], [423, 487, 9], [487, 531, 0], [531, 583, 3], [653, 743, 2], [743, 762, 7], [762, 783, 4], [783, 872, 6], [872, 946, 8], [974, 1004, 1]], 
            [[281, 353, 5], [423, 434, 1], [530, 541, 8], [541, 617, 9], [617, 638, 0], [748, 780, 6], [780, 828, 7], [832, 904, 4], [904, 926, 3], [926, 971, 2]]
        ]
        # fmt: on
        return delayed_gantt

    # リアクティブスケジュールの初期ガントチャートの取得 [start, end, job_num]
    def initial_gantt_v1(self):
        # fmt: off
        init_gantt = [
            [[0, 76, 8], [76, 113, 6], [113, 199, 7], [199, 242, 1], [242, 248, 4], [248, 277, 0], [282, 353, 3], [353, 438, 2], [438, 451, 9], [541, 588, 5],],
            [[0, 46, 6], [46, 127, 3], [127, 129, 5], [129, 198, 8], [199, 245, 7], [245, 336, 2], [336, 421, 9], [421, 443, 4], [443, 521, 0], [635, 663, 1],],
            [[0, 31, 7], [31, 115, 5], [115, 129, 4], [174, 187, 6], [187, 282, 3], [282, 372, 1], [372, 457, 8], [457, 518, 9], [521, 530, 0], [530, 604, 2],],
            [[113, 174, 6], [198, 274, 8], [274, 369, 5], [438, 477, 2], [504, 530, 4], [530, 566, 0], [566, 635, 1], [692, 790, 3], [794, 846, 9], [846, 925, 7],],
            [[319, 351, 7], [372, 447, 1], [447, 546, 3], [546, 615, 4], [615, 664, 0], [664, 690, 8], [690, 696, 5], [696, 751, 6], [846, 936, 9], [950, 983, 2],],
            [[129, 181, 5], [219, 240, 6], [245, 319, 7], [319, 370, 8], [443, 504, 4], [664, 675, 0], [747, 794, 9], [794, 804, 2], [804, 850, 1], [850, 893, 3],],
            [[187, 219, 6], [351, 439, 7], [469, 509, 8], [518, 525, 9], [546, 555, 3], [588, 653, 5], [675, 737, 0], [737, 783, 1], [816, 905, 2], [905, 958, 4],],
            [[361, 391, 6], [509, 598, 8], [607, 692, 3], [692, 741, 4], [741, 777, 7], [777, 802, 5], [804, 816, 2], [816, 872, 0], [872, 944, 1], [944, 989, 9],],
            [[272, 361, 6], [369, 417, 5], [439, 458, 7], [555, 607, 3], [607, 671, 9], [671, 692, 4], [692, 782, 2], [782, 856, 8], [872, 916, 0], [944, 974, 1],],
            [[240, 272, 6], [447, 458, 1], [458, 469, 8], [469, 541, 5], [541, 589, 7], [671, 747, 9], [747, 819, 4], [819, 841, 3], [905, 950, 2], [950, 971, 0],],
        ]
        # fmt: on
        return init_gantt

    # Machine2のジョブ1の終了時刻が372 → 422に遅延しているガントチャートを取得
    def delayed_gantt_v1(self):
        # fmt: off
        delayed_gantt = [
            [[0, 76, 8], [76, 113, 6], [113, 199, 7], [199, 242, 1], [242, 248, 4], [248, 277, 0], [282, 353, 3], [353, 438, 2], [438, 451, 9], [541, 588, 5],],
            [[0, 46, 6], [46, 127, 3], [127, 129, 5], [129, 198, 8], [199, 245, 7], [245, 336, 2], [336, 421, 9], [421, 443, 4], [443, 521, 0], [635, 663, 1],],
            [[0, 31, 7], [31, 115, 5], [115, 129, 4], [174, 187, 6], [187, 282, 3], [282, 422, 1], [372, 457, 8], [457, 518, 9], [521, 530, 0], [530, 604, 2],],
            [[113, 174, 6], [198, 274, 8], [274, 369, 5], [438, 477, 2], [504, 530, 4], [530, 566, 0], [566, 635, 1], [692, 790, 3], [794, 846, 9], [846, 925, 7],],
            [[319, 351, 7], [372, 447, 1], [447, 546, 3], [546, 615, 4], [615, 664, 0], [664, 690, 8], [690, 696, 5], [696, 751, 6], [846, 936, 9], [950, 983, 2],],
            [[129, 181, 5], [219, 240, 6], [245, 319, 7], [319, 370, 8], [443, 504, 4], [664, 675, 0], [747, 794, 9], [794, 804, 2], [804, 850, 1], [850, 893, 3],],
            [[187, 219, 6], [351, 439, 7], [469, 509, 8], [518, 525, 9], [546, 555, 3], [588, 653, 5], [675, 737, 0], [737, 783, 1], [816, 905, 2], [905, 958, 4],],
            [[361, 391, 6], [509, 598, 8], [607, 692, 3], [692, 741, 4], [741, 777, 7], [777, 802, 5], [804, 816, 2], [816, 872, 0], [872, 944, 1], [944, 989, 9],],
            [[272, 361, 6], [369, 417, 5], [439, 458, 7], [555, 607, 3], [607, 671, 9], [671, 692, 4], [692, 782, 2], [782, 856, 8], [872, 916, 0], [944, 974, 1],],
            [[240, 272, 6], [447, 458, 1], [458, 469, 8], [469, 541, 5], [541, 589, 7], [671, 747, 9], [747, 819, 4], [819, 841, 3], [905, 950, 2], [950, 971, 0],],
        ]
        # fmt: on
        return delayed_gantt

    # リアクティブスケジュールの初期ガントチャートの取得 [start, end, job_num]
    def initial_gantt_v2(self):
        # fmt: off
        init_gantt = [
            [[0, 76, 8], [76, 105, 0], [115, 201, 7], [201, 244, 1], [244, 250, 4], [250, 263, 9], [263, 334, 3], [364, 401, 6], [401, 448, 5], [455, 540, 2]], 
            [[0, 81, 3], [84, 86, 5], [86, 171, 9], [171, 249, 0], [249, 318, 8], [318, 364, 6], [364, 455, 2], [455, 501, 7], [501, 523, 4], [531, 559, 1]], 
            [[0, 84, 5], [84, 115, 7], [115, 210, 3], [210, 224, 4], [249, 258, 0], [258, 348, 1], [348, 409, 9], [445, 530, 8], [530, 543, 6], [579, 653, 2]], 
            [[138, 233, 5], [258, 294, 0], [318, 394, 8], [401, 462, 6], [462, 531, 1], [540, 579, 2], [636, 662, 4], [683, 735, 9], [755, 853, 3], [868, 947, 7]], 
            [[294, 343, 0], [348, 423, 1], [423, 522, 3], [522, 528, 5], [575, 607, 7], [662, 731, 4], [731, 757, 8], [757, 847, 9], [902, 957, 6], [971, 1004, 2]], 
            [[86, 138, 5], [343, 354, 0], [394, 445, 8], [501, 575, 7], [575, 636, 4], [636, 683, 9], [727, 748, 6], [748, 758, 2], [773, 819, 1], [926, 969, 3]], 
            [[354, 416, 0], [416, 423, 9], [448, 513, 5], [522, 531, 3], [541, 581, 8], [607, 695, 7], [695, 727, 6], [727, 773, 1], [773, 862, 2], [904, 957, 4]], 
            [[416, 472, 0], [528, 553, 5], [581, 670, 8], [670, 755, 3], [758, 770, 2], [783, 832, 4], [832, 868, 7], [872, 902, 6], [902, 974, 1], [974, 1019, 9]], 
            [[233, 281, 5], [423, 487, 9], [487, 531, 0], [531, 583, 3], [653, 743, 2], [743, 762, 7], [762, 783, 4], [783, 872, 6], [872, 946, 8], [974, 1004, 1]], 
            [[281, 353, 5], [423, 434, 1], [530, 541, 8], [541, 617, 9], [617, 638, 0], [748, 780, 6], [780, 828, 7], [832, 904, 4], [904, 926, 3], [926, 971, 2]]
        ]
        # fmt: on
        return init_gantt

    # Machine2のジョブ8の終了時刻が318 → 378に遅延しているガントチャートを取得
    def delayed_gantt_v2(self):
        # fmt: off
        delayed_gantt = [
            [[0, 76, 8], [76, 105, 0], [115, 201, 7], [201, 244, 1], [244, 250, 4], [250, 263, 9], [263, 334, 3], [364, 401, 6], [401, 448, 5], [455, 540, 2]], 
            [[0, 81, 3], [84, 86, 5], [86, 171, 9], [171, 249, 0], [249, 408, 8], [318, 364, 6], [364, 455, 2], [455, 501, 7], [501, 523, 4], [531, 559, 1]], 
            [[0, 84, 5], [84, 115, 7], [115, 210, 3], [210, 224, 4], [249, 258, 0], [258, 348, 1], [348, 409, 9], [445, 530, 8], [530, 543, 6], [579, 653, 2]], 
            [[138, 233, 5], [258, 294, 0], [318, 394, 8], [401, 462, 6], [462, 531, 1], [540, 579, 2], [636, 662, 4], [683, 735, 9], [755, 853, 3], [868, 947, 7]], 
            [[294, 343, 0], [348, 423, 1], [423, 522, 3], [522, 528, 5], [575, 607, 7], [662, 731, 4], [731, 757, 8], [757, 847, 9], [902, 957, 6], [971, 1004, 2]], 
            [[86, 138, 5], [343, 354, 0], [394, 445, 8], [501, 575, 7], [575, 636, 4], [636, 683, 9], [727, 748, 6], [748, 758, 2], [773, 819, 1], [926, 969, 3]], 
            [[354, 416, 0], [416, 423, 9], [448, 513, 5], [522, 531, 3], [541, 581, 8], [607, 695, 7], [695, 727, 6], [727, 773, 1], [773, 862, 2], [904, 957, 4]], 
            [[416, 472, 0], [528, 553, 5], [581, 670, 8], [670, 755, 3], [758, 770, 2], [783, 832, 4], [832, 868, 7], [872, 902, 6], [902, 974, 1], [974, 1019, 9]], 
            [[233, 281, 5], [423, 487, 9], [487, 531, 0], [531, 583, 3], [653, 743, 2], [743, 762, 7], [762, 783, 4], [783, 872, 6], [872, 946, 8], [974, 1004, 1]], 
            [[281, 353, 5], [423, 434, 1], [530, 541, 8], [541, 617, 9], [617, 638, 0], [748, 780, 6], [780, 828, 7], [832, 904, 4], [904, 926, 3], [926, 971, 2]]
        ]
        # fmt: on
        return delayed_gantt


# 対象のジョブショップスケジューリング問題を取得
def get_jm_table(jsp):
    if jsp == "MT6_6":
        return MT6_6()
    elif jsp == "MT10_10":
        return MT10_10()


# ジョブの状態を管理するクラス  遺伝子をガントチャートに展開する際に各ジョブの次の作業の情報を管理する
class JobMachineChild:
    def __init__(self, jm_parent):
        self.jm_parent = jm_parent
        # ジョブごとの次工程番号を格納する配列
        self._next_process_indexes = [0] * jm_parent.get_job_count()
        # ジョブごとの次工程が開始できる時刻の配列
        self._next_process_starts = [0] * jm_parent.get_job_count()

    # job_numのジョブの次工程の機械番号を取得
    def get_machine(self, job_num):
        process_index = self._next_process_indexes[job_num]
        return self.jm_parent.get_machine(job_num, process_index)

    # job_numのジョブの次工程の処理時間を取得
    def get_process_time(self, job_num):
        process_index = self._next_process_indexes[job_num]
        return self.jm_parent.get_process_time(job_num, process_index)

    # job_numジョブの最も早い次工程の開始時刻を取得; この時間より後前開始できない
    def get_earliest(self, job_num):
        return self._next_process_starts[job_num]

    # job_numジョブを次工程に進める。次工程は現工程の終了時刻以降に開始できる
    def set_next_earliest(self, job_num, job_end):
        self._next_process_starts[job_num] = job_end
        self._next_process_indexes[job_num] += 1


# リスケジューリング時に各ジョブが次にできる作業の情報を管理するクラス
class JobMachineChild_Reactive:
    def __init__(self, jm_parent, fixed_gantt, reschdule_time):
        self.jm_parent = jm_parent
        # ジョブごとの次工程番号を格納する配列
        next_prosess_indexes = [0] * jm_parent.get_job_count()
        # ジョブごとの次工程が開始できる時刻の配列
        next_prosess_starts = [reschdule_time] * jm_parent.get_job_count()
        # fixed_ganttから各ジョブの次の作業の開始時間やインデックスを取得する
        for machine in fixed_gantt:
            for task in machine:
                next_prosess_indexes[task[2]] += 1
                if task[1] > reschdule_time:
                    next_prosess_starts[task[2]] = task[1]
        # ジョブごとの次工程番号を格納する配列  ganttの中で出てきたそのジョブの数が次の工程番号
        self._next_process_indexes = next_prosess_indexes
        # ジョブごとの次工程が開始できる時刻の配列  ganttの中で出てきたそのジョブの最も遅い終了時間orリスケ地点が次工程の開始可能時刻
        self._next_process_starts = next_prosess_starts

    # job_numのジョブの次工程の機械番号を取得
    def get_machine(self, job_num):
        process_index = self._next_process_indexes[job_num]
        return self.jm_parent.get_machine(job_num, process_index)

    # job_numのジョブの次工程の処理時間を取得
    def get_process_time(self, job_num):
        process_index = self._next_process_indexes[job_num]
        return self.jm_parent.get_process_time(job_num, process_index)

    # job_numジョブの最も早い次工程の開始時刻を取得; この時間より後前開始できない
    def get_earliest(self, job_num):
        return self._next_process_starts[job_num]

    # job_numジョブを次工程に進める。次工程は現工程の終了時刻以降に開始できる
    def set_next_earliest(self, job_num, job_end):
        self._next_process_starts[job_num] = job_end
        self._next_process_indexes[job_num] += 1
